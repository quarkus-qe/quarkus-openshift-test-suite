apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Secret
  metadata:
    name: mssql
  type: Opaque
  stringData:
    database: mydb
    username: sa
    password: My1337p@ssworD

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: mssql
  spec:
    lookupPolicy:
      local: false
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: mcr.microsoft.com/mssql/rhel/server

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: mssql
  spec:
    replicas: 1
    selector:
      name: mssql
    template:
      metadata:
        labels:
          name: mssql
      spec:
        containers:
        - name: mssql
          env:
          - name: ACCEPT_EULA
            value: 'Y'
          - name: SA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mssql
                key: password
          - name: MSSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: mssql
                key: database
          - name: MSSQL_USERNAME
            valueFrom:
              secretKeyRef:
                name: mssql
                key: username
          - name: MSSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mssql
                key: password
          image: ''
          livenessProbe:
            tcpSocket:
              port: 1433
            initialDelaySeconds: 30
            timeoutSeconds: 1
          ports:
          - containerPort: 1433
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/mssql-tools/bin/sqlcmd -S localhost -U "${MSSQL_USERNAME}" -P "${MSSQL_PASSWORD}" -Q 'select 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
          - name: mssql-data
            mountPath: /var/opt/mssql
          # this post-start hook is a workaround for MSSQL's inability to create a database at startup
          # don't worry about the MSSQL pod being in "creating" state for too long, that's how post-start hooks work
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/bash
                - -c
                - sleep 30 && /opt/mssql-tools/bin/sqlcmd -S localhost -U "${MSSQL_USERNAME}" -P "${MSSQL_PASSWORD}" -Q "create database ${MSSQL_DATABASE}"
        volumes:
        - name: mssql-data
          emptyDir: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - mssql
        from:
          kind: ImageStreamTag
          name: mssql:latest

- apiVersion: v1
  kind: Service
  metadata:
    name: mssql
  spec:
    ports:
    - name: mssql
      port: 1433
      protocol: TCP
      targetPort: 1433
    selector:
      name: mssql
    type: ClusterIP
